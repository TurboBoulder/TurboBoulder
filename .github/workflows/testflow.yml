name: testflow

on:
  push:
    branches:
      - 'release*'
  workflow_dispatch:

jobs:
  package:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Zip files
        run: |
          zip -r project_files_test.zip api frontend shared TurboBoulder.sln

      - name: "Get branch name and save to env"
        env:
          IS_PR: ${{ github.EVENT_NAME == 'pull_request' }}
        run: |
          if ${IS_PR}; then
            BRANCH_NAME="${GITHUB_HEAD_REF}"
          else
            BRANCH_NAME="${GITHUB_REF##*/}"
          fi
          echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "Project_Files_${{ env.BRANCH_NAME }}_${{ github.run_number }}"
          release_name: "Project Files Release_${{ env.BRANCH_NAME }}_${{ github.run_number }}"
          body: Project files only. These will be downloaded by the CLI tool when needed.
          draft: false
          prerelease: true


      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./project_files_test.zip
          asset_name: project_files_test.zip
          asset_content_type: application/zip

      - name: Get Release Asset Information
        id: get_info
        run: |
          RELEASE_ID=$(echo "${{ steps.create_release.outputs.id }}")
          ASSET_INFO=$(curl \
            --location \
            --request GET "https://api.github.com/repos/$GITHUB_REPOSITORY/releases/$RELEASE_ID" \
            --header "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" | jq -r '.assets[0]')
          ASSET_DOWNLOAD_URL=$(echo "$ASSET_INFO" | jq -r '.browser_download_url')
          echo "ASSET_DOWNLOAD_URL=$ASSET_DOWNLOAD_URL" >> $GITHUB_ENV
        shell: bash


      - name: Create config file
        run: |
          echo "${ASSET_DOWNLOAD_URL}" > downloadurl.conf
        shell: bash

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.0.x'  # adjust this according to your project's requirement

      - name: Build project - Windows
        run: |
          cd tools/cli
          dotnet publish -c Release -r win10-x64 --self-contained false
          cp ../../downloadurl.conf ./bin/Release/net7.0/win10-x64/publish/downloadurl.conf
          cd ./bin/Release/net7.0/win10-x64/publish
          zip -r ../../../../../windows_asset.zip ./
          cd ../../../../../
        shell: bash

      - name: Create Windows Release
        id: create_windows_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "CLI_Tool_Windows_${{ env.BRANCH_NAME }}_${{ github.run_number }}"
          release_name: "CLI tool for windows - ${{ env.BRANCH_NAME }}_${{ github.run_number }}"
          body: CLI tool for windows. Far from working.
          draft: false
          prerelease: true

      - name: Upload Windows Release Asset
        id: upload-windows-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_windows_release.outputs.upload_url }}
          asset_path: ./tools/cli/windows_asset.zip
          asset_name: windows_asset.zip
          asset_content_type: application/zip

      - name: Build project - Linux
        run: |
          cd tools/cli
          dotnet publish -c Release -r linux-x64 --self-contained false
          cp ../../downloadurl.conf ./bin/Release/net7.0/linux-x64/publish/downloadurl.conf
          cd ./bin/Release/net7.0/linux-x64/publish
          zip -r ../../../../../linux_asset.zip ./
          cd ../../../../../
        shell: bash


      - name: Create Linux Release
        id: create_linux_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "CLI_Tool_Linux_${{ env.BRANCH_NAME }}_${{ github.run_number }}"
          release_name: "CLI tool for linux - ${{ env.BRANCH_NAME }}_${{ github.run_number }}"
          body: CLI tool for linux. Far from working.
          draft: false
          prerelease: true

      - name: Upload Linux Release Asset
        id: upload-linux-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_linux_release.outputs.upload_url }}
          asset_path: ./tools/cli/linux_asset.zip
          asset_name: linux_asset.zip
          asset_content_type: application/zip
